// <auto-generated />
using System;
using Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Db.Migrations
{
    [DbContext(typeof(BitmexContext))]
    [Migration("20230329065204_1.1")]
    partial class _11
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Db.Instrument", b =>
                {
                    b.Property<string>("symbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("askPrice")
                        .HasColumnType("real");

                    b.Property<float?>("bidPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("calcInterval")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("deleverage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("expiry")
                        .HasColumnType("datetime2");

                    b.Property<long?>("fairBasis")
                        .HasColumnType("bigint");

                    b.Property<float?>("fairBasisRate")
                        .HasColumnType("real");

                    b.Property<string>("fairMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("fairPrice")
                        .HasColumnType("float");

                    b.Property<long?>("foreignNotional24h")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("front")
                        .HasColumnType("datetime2");

                    b.Property<string>("fundingBaseSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("fundingInterval")
                        .HasColumnType("datetime2");

                    b.Property<string>("fundingPremiumSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fundingQuoteSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("fundingRate")
                        .HasColumnType("real");

                    b.Property<DateTime?>("fundingTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("hasLiquidity")
                        .HasColumnType("bit");

                    b.Property<float?>("highPrice")
                        .HasColumnType("real");

                    b.Property<long?>("homeNotional24h")
                        .HasColumnType("bigint");

                    b.Property<long?>("impactAskPrice")
                        .HasColumnType("bigint");

                    b.Property<float?>("impactBidPrice")
                        .HasColumnType("real");

                    b.Property<long?>("impactMidPrice")
                        .HasColumnType("bigint");

                    b.Property<double?>("indicativeSettlePrice")
                        .HasColumnType("float");

                    b.Property<double?>("initMargin")
                        .HasColumnType("float");

                    b.Property<bool?>("isInverse")
                        .HasColumnType("bit");

                    b.Property<bool?>("isQuanto")
                        .HasColumnType("bit");

                    b.Property<long?>("lastChangePcnt")
                        .HasColumnType("bigint");

                    b.Property<double?>("lastPrice")
                        .HasColumnType("float");

                    b.Property<double?>("lastPriceProtected")
                        .HasColumnType("float");

                    b.Property<string>("lastTickDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("limit")
                        .HasColumnType("float");

                    b.Property<double?>("limitDownPrice")
                        .HasColumnType("float");

                    b.Property<double?>("limitUpPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("listedSettle")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("listing")
                        .HasColumnType("datetime2");

                    b.Property<long?>("lotSize")
                        .HasColumnType("bigint");

                    b.Property<float?>("lowPrice")
                        .HasColumnType("real");

                    b.Property<double?>("maintMargin")
                        .HasColumnType("float");

                    b.Property<double?>("makerFee")
                        .HasColumnType("float");

                    b.Property<string>("markMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("markPrice")
                        .HasColumnType("float");

                    b.Property<long?>("maxOrderQty")
                        .HasColumnType("bigint");

                    b.Property<long?>("maxPrice")
                        .HasColumnType("bigint");

                    b.Property<float?>("midPrice")
                        .HasColumnType("real");

                    b.Property<long?>("multiplier")
                        .HasColumnType("bigint");

                    b.Property<long?>("openInterest")
                        .HasColumnType("bigint");

                    b.Property<long?>("openValue")
                        .HasColumnType("bigint");

                    b.Property<string>("positionCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("prevClosePrice")
                        .HasColumnType("real");

                    b.Property<double?>("prevPrice24h")
                        .HasColumnType("float");

                    b.Property<long?>("prevTotalTurnover")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("publishInterval")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("publishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("quoteCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("quoteToSettleMultiplier")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("rebalanceInterval")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("rebalanceTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("referenceSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("riskLimit")
                        .HasColumnType("bigint");

                    b.Property<long?>("riskStep")
                        .HasColumnType("bigint");

                    b.Property<string>("rootSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("settlCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("settle")
                        .HasColumnType("datetime2");

                    b.Property<double?>("settledPrice")
                        .HasColumnType("float");

                    b.Property<long?>("settledPriceAdjustmentRate")
                        .HasColumnType("bigint");

                    b.Property<double?>("settlementFee")
                        .HasColumnType("float");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("takerFee")
                        .HasColumnType("float");

                    b.Property<bool?>("taxed")
                        .HasColumnType("bit");

                    b.Property<double?>("tickSize")
                        .HasColumnType("float");

                    b.Property<DateTime?>("timestamp")
                        .HasColumnType("datetime2");

                    b.Property<long?>("totalTurnover")
                        .HasColumnType("bigint");

                    b.Property<long?>("totalVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("turnover")
                        .HasColumnType("bigint");

                    b.Property<long?>("turnover24h")
                        .HasColumnType("bigint");

                    b.Property<string>("typ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("underlying")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("underlyingSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("underlyingToPositionMultiplier")
                        .HasColumnType("bigint");

                    b.Property<long?>("underlyingToSettleMultiplier")
                        .HasColumnType("bigint");

                    b.Property<long?>("volume")
                        .HasColumnType("bigint");

                    b.Property<long?>("volume24h")
                        .HasColumnType("bigint");

                    b.Property<float?>("vwap")
                        .HasColumnType("real");

                    b.HasKey("symbol");

                    b.ToTable("instruments");
                });
#pragma warning restore 612, 618
        }
    }
}
